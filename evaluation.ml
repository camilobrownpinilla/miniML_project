(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
           
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value = 
      match exp with
      | Fun _ -> Closure (exp, env)
      | _ -> raise (EvalError "Only functions can be closed")

    let lookup (env : env) (varname : varid) : value =
      let f = fun (a, _b) -> a = varname in
      match List.filter f env with
      | (_var, val') :: _tl -> !val'
      | [] -> raise (EvalError "Var not found in environment")


    let extend (env : env) (varname : varid) (loc : value ref) : env =
      let rec extend' env =
        match env with
        | [] -> [(varname, loc)] (* If varname is not in env, add it *)
        | (var, val_ref) :: tl ->
          if var = varname then
            begin
              val_ref := !loc; (* If varname is found, change its value *)
              env
            end
          else
            (var, val_ref) :: extend' tl 
      in
      extend' env

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      let etc = exp_to_concrete_string in
      match v with
      | Val exp -> etc exp
      | Closure (exp, env) -> 
        if printenvp then wrap ((etc exp) ^^^ (env_to_string env))
        else etc exp 

    and env_to_string (env : env) : string =
      let env_to_string' (a, b) = wrap (a ^^^ (value_to_string !b)) in
      let string_list = List.map env_to_string' env in
      "[" ^ (String.concat "; " string_list) ^ "]"
  end
;;


(* ..........................Evaluation Helpers...............................*)
let eval_unop (u : unop) (e : expr) (f: expr -> Env.env -> expr) 
              (env : Env.env) : expr = 
  let error = EvalError "Error: Operation ill-defined on types" in
  match u, f e env with
  | Negate, Num n -> Num (~-n)
  | Negate, Float n -> Float (~-.n)
  | Negate, _ -> raise error
  | Sin, Float n -> Float (sin n)
  | Sin , _ -> raise error
  | Cos, Float n -> Float (cos n)
  | Cos, _ -> raise error
  | Not, Bool b -> Bool (not b)
  | Not, _ -> raise error
;;

let eval_binop (b : binop) (e1 : expr) (e2 : expr) (f : expr -> Env.env -> expr) 
               (env : Env.env) : expr =
  match b, f e1 env, f e2 env with
  | Plus, Num a, Num b -> Num (a + b)
  | Plus, Float a, Float b -> Float (a +. b)
  | Minus, Num a, Num b -> Num (a - b)
  | Minus, Float a, Float b -> Float (a -. b)
  | Times, Num a, Num b -> Num (a * b)
  | Times, Float a, Float b -> Float (a *. b)
  | Div, Num a, Num b -> Num (a / b) (* Will round down as in standard OCaml *)
  | Div, Float a, Float b -> Float (a /. b)
  | Exp, Float a, Float b -> Float (a ** b)
  | Equals, Num a, Num b -> Bool (a = b)
  | Equals, Float a, Float b -> Bool (a = b)
  | Equals, Bool a, Bool b -> Bool (a = b)
  | Equals, Char a, Char b -> Bool (a = b)
  | Equals, String a, String b -> Bool (a = b)
  | NotEquals, Num a, Num b -> Bool (a <> b)
  | NotEquals, Float a, Float b -> Bool (a <> b)
  | NotEquals, Bool a, Bool b -> Bool (a <> b)
  | NotEquals, Char a, Char b -> Bool (a <> b)
  | NotEquals, String a, String b -> Bool (a <> b)
  | LessThan, Num a, Num b -> Bool (a < b)
  | LessThan, Float a, Float b -> Bool (a < b)
  | LessThan, Bool a, Bool b -> Bool (a < b)
  | LessThan, Char a, Char b -> Bool (a < b)
  | LessThan, String a, String b -> Bool (a < b)
  | LessThanEq, Num a, Num b -> Bool (a <= b)
  | LessThanEq, Float a, Float b -> Bool (a <= b)
  | LessThanEq, Bool a, Bool b -> Bool (a <= b)
  | LessThanEq, Char a, Char b -> Bool (a <= b)
  | LessThanEq, String a, String b -> Bool (a <= b)
  | GreaterThan, Num a, Num b -> Bool (a > b)
  | GreaterThan, Float a, Float b -> Bool (a > b)
  | GreaterThan, Bool a, Bool b -> Bool (a > b)
  | GreaterThan, Char a, Char b -> Bool (a > b)
  | GreaterThan, String a, String b -> Bool (a > b)
  | GreaterThanEq, Num a, Num b -> Bool (a >= b)
  | GreaterThanEq, Float a, Float b -> Bool (a >= b)
  | GreaterThanEq, Bool a, Bool b -> Bool (a >= b)
  | GreaterThanEq, Char a, Char b -> Bool (a >= b)
  | GreaterThanEq, String a, String b -> Bool (a >= b)
  | Concat, String a, String b -> String (a ^ b)
  | And, Bool a, Bool b -> Bool (a && b)
  | Or, Bool a, Bool b -> Bool (a || b)
  | _ -> raise (EvalError "Error: Operation ill-defined on types")
;;

let eval_cond (cond : expr) (a : expr) (b : expr) (f : expr -> Env.env -> expr) 
              (env : Env.env) : expr = 
  match f cond env with
  | Bool x -> if x then (f a env) else (f b env)
  | _ -> raise (EvalError "Error: Expecting bool in if-else condition")
;;

let eval_app (e1 : expr) (e2 : expr) (f : expr -> Env.env -> expr) 
             (env : Env.env) : expr =
  if env = Env.empty() then
    match f e1 env with
    | Fun (x, b) -> let q = f e2 env in f (subst x q b) env
    | _ -> 
      raise (EvalError "Error: This is not a function; it cannot be applied")
  else 
    match f e1 env with
    | Fun (x, b) -> let q = f e2 env in 
                    let  q_loc = ref (Env.Val q) in
                    let env' = Env.extend env x q_loc in
                    f b env'
    | _ -> 
      raise (EvalError "Error: This is not a function; it cannot be applied")   
;;

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator *)
   
let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let env = Env.empty() in
  let rec eval_s' (exp : expr) (env : Env.env) : expr =
    match exp with
    | Var _ | Unassigned -> raise (EvalError "Error: Unbound value")
    | Raise -> raise EvalException
    | Num _ | Float _ | Char _ | String _ | Bool _ ->  exp 
    | Fun _ -> exp
    | Unop (u, e) ->  eval_unop u e eval_s' env
    | Binop (b, e1, e2) ->  eval_binop b e1 e2 eval_s' env
    | Conditional (e1, e2, e3) -> eval_cond e1 e2 e3 eval_s' env
    | Let (x, d, b) -> let vd = eval_s' d env in
                       eval_s' (subst x vd b) env
    | App (e1, e2) -> eval_app e1 e2 eval_s' env
    | Letrec (x, d, b) -> let vd = eval_s' d env in
                          let rec_repl' = Letrec (x, vd, Var x) in
                          let rec_repl = (subst x rec_repl' vd) in
                          eval_s' (subst x rec_repl b) env            
  in

  Env.Val (eval_s' exp env) ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
   
let eval_d (exp : expr) (env : Env.env) : Env.value =
  let rec eval_d' (exp : expr) (env : Env.env) : expr =
    match exp with 
    | Unassigned -> raise (EvalError "Error: Unbound value")
    | Raise -> raise EvalException
    | Num _ | Bool _ | Float _ | Char _ | String _ -> exp
    | Var v -> begin match Env.lookup env v with 
                    | Env.Val x -> x 
                    | Env.Closure _ -> raise (EvalError "Nice! This is impossible")
                end
    | Fun _ -> exp
    | Unop (u, e) -> eval_unop u e eval_d' env
    | Binop (b, e1, e2) -> eval_binop b e1 e2 eval_d' env
    | Conditional (e1, e2, e3) -> eval_cond e1 e2 e3 eval_d' env
    | Let (x, d, b) | Letrec (x, d, b) -> 
      let vd = eval_d' d env in
      let vd_loc = ref (Env.Val vd) in
      let env' = Env.extend env x vd_loc in
      eval_d' b env'
    | App (e1, e2) -> eval_app e1 e2 eval_d' env
  in

  Env.Val (eval_d' exp env) ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
   
let eval_l (exp : expr) (env : Env.env) : Env.value =

  (* Define new procedure for evaluating applications with lexical scoping *)
  let eval_app' (e1 : expr) (e2 : expr) 
                (f : expr -> Env.env -> expr) (env : Env.env) : expr =
    match f e1 env with
    | Fun (x, b) ->
      begin 
      match Env.close (Fun (x, b)) env with
      | Env.Closure (_exp, ed) -> let q = ref (Env.Val (f e2 env)) in
                              let el = Env.extend ed x q in
                              f b el
      | _ -> raise (EvalError "Impossible state")
      end 
    | _ -> 
      raise (EvalError "Error: This is not a function; it cannot be applied")
  in

  (* Define procedure for letrec evaluation *)
  let eval_rec (x : varid) (d : expr) (b : expr) 
               (f : expr -> Env.env -> expr) (env : Env.env) : expr =
    let env_x = Env.extend env x (ref (Env.Val Unassigned)) in
    let vd = ref (Env.Val (f d env)) in
    let env' = Env.extend env_x x vd in
    f b env' 
  in

  (* FUN_EVAL - store the result of fun evalutation; necessary value used to
     circumvent the <expr> type output of eval_l' *)
  let fun_eval = ref (Env.Closure (Unassigned, Env.empty())) in

  let rec eval_l' (exp : expr) (env : Env.env) : expr =
    match exp with 
    | Unassigned -> raise (EvalError "Error: Unbound value")
    | Raise -> raise EvalException
    | Num _ | Bool _ | Float _ | Char _ | String _ -> exp
    | Var v -> begin match Env.lookup env v with 
                    | Env.Val x -> x 
                    | Env.Closure _ -> raise (EvalError "Nice! This is impossible")
                end
    | Fun _ -> fun_eval := Env.close exp env; exp
    | Unop (u, e) -> eval_unop u e eval_l' env
    | Binop (b, e1, e2) -> eval_binop b e1 e2 eval_l' env
    | Conditional (e1, e2, e3) -> eval_cond e1 e2 e3 eval_l' env
    | Let (x, d, b) -> 
      let vd = eval_l' d env in
      let vd_loc = ref (Env.Val vd) in
      let env' = Env.extend env x vd_loc in
      eval_l' b env'
    | Letrec (x, d, b) -> eval_rec x d b eval_l' env
    | App (e1, e2) -> eval_app' e1 e2 eval_l' env
  in

  (* Necessary match to make Function evaluation compatible with types *)
  match eval_l' exp env with
  | Fun _ -> !fun_eval 
  | _ -> Env.Val (eval_l' exp env) ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l ;;
